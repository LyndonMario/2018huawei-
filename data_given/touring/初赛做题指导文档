初赛做题指导文档（含伪代码）

前言：为了使得参赛者更好地上手解决赛题，这里给出一个简单的、基本的解题思路，但注意本文档给出的解题办法只是初级的（得分可能较低），并非最优的算法，只能算是抛砖引玉，请各位参赛者务必寻找更好的解题办法并自己实现。

首先来看一下初赛赛题，题干要求根据用户对虚拟机的请求数据进行预测，然后再根据预测结果，考虑应该部署多少台物理服务器，以及怎么把预测出来的虚拟机放置到每台物理服务器上。抽象来讲，这个过程包含两个阶段：即基于虚拟机请求的预测阶段和虚拟机的放置阶段。预测阶段属于机器学习的拟合问题，而逻辑回归是解决这类问题最基本也是做常用的办法。下面先来介绍一种简单的线性回归模型。
	
（一）预测阶段：通过对历史数据的初步分析，我们可以假设需要预测时间段的虚拟机数量与前面若干个时刻的虚拟机分布是相关的。形式化表示为：对于某种虚拟机规格 f，由于任何下一个时刻 t 的虚拟机数量都与前 n 个时刻的虚拟机数量相关，设相关权重分别为 w_1,w_2,……,w_n，通常时间越接近的数据相关权重，时间越远的数据权重越小。使用S_t 表示每个时刻的虚拟机数量，那么要预测虚拟机规格 f 在 t 时刻的数量模型为：
S_t^f=w_1 S_(t-1)^f+w_2 S_(t-2)^f+⋯+w_n S_(t-n)^f    公式（1）

伪代码如下（Logistic）：
对每个虚拟机规格 f
	根据训练数据集确定相关权重系数大小 w_1,w_2,……,w_n
	代入公式（1），求出虚拟机规格 f 在时刻 t 的数量 S_t^f

综合每种规格的虚拟机在 t 时刻的数量 N_t=∑_f▒S_t^f 

根据题干，设计完预测模型，得到虚拟机预测结果，我们需要把这些都放在物理服务器上，这是“装箱问题”，也是“背包问题”。直观上来讲，先放“西瓜”，后放“芝麻”，效果更好，同时放置的时候尽可能“避免浪费”，也就是说我们可以“贪心”地放，除非当前的机器放不下才考虑开启新的机器。由此，下面介绍一种比较简单的放置算法。

（二）放置阶段：对预测出来的虚拟机数量对物理服务器进行放置，使得机器数量最小，资源利用率最大。比较经典的解决策略可参考首次适应算法（First-Fit），即虚拟机在分配的时候每次都选择放在首次能满足需求的物理服务器上。这里使用 v 表示任何虚拟机，h 表示任意物理服务器，r_v 表示虚拟机的资源需求向量，R_h 表示物理服务器的剩余资源量。由预测阶段可知待放置虚拟机集合为 N_t，设初始物理服务器集合为 H（开始可默认为1台）。

伪代码如下（First-Fit）：
对于预测出来的每个虚拟机v∈N_t
		从物理服务器集合H选择首次能满足需求的物理服务器h^first
		如果 r_v≤R_(h^first )：
放置到该台物理服务器
物理服务器做资源扣减 R_(h^first )=R_(h^first )-r_v
		否则：
			开启一台新的物理服务器 h^new
			虚拟机放置到新的物理服务上并作资源扣减 R_(h^new )=R_(h^new )-r_v
		更新所用物理服务器集合 H^'
		更新剩余虚拟机集合 N_t^'



再次声明：以上仅仅是解题的最基本、最简单的思路，并非最佳答案，请参赛者务必自己查阅资料、独立思考，设计出更好的算法解题，才能得到较高的分数！

